{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.tsx"],"names":[],"mappings":";;AAAA,uCAAgE;AAChE,+BAA8B;AAC9B,gDAA+C;AAE/C,yBAAkE;AAElE,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;QACpE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QACpB,IAAI,aAAa,GAAG,KAAK,CAAA;QACzB,MAAM,MAAM,GAAW,GAAG,EAAE;YAC1B,aAAa,GAAG,IAAI,CAAA;QACtB,CAAC,CAAA;QAED,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAWD,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAA;QAKhC,MAAM,OAAO,GAAG,gBAAa,EAAE,CAAA;QAE/B,MAAM,SAAS,GAAiC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;YAC/D,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;YACzB,OAAO,gCAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAM,CAAA;QACtC,CAAC,CAAA;QACD,MAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;QAC7C,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,GAAG;YAClB,oBAAC,kBAAkB,OAAG,CACb,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;IAChC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAChE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QACpB,IAAI,aAAa,GAAG,KAAK,CAAA;QACzB,MAAM,MAAM,GAAW,GAAG,EAAE;YAC1B,aAAa,GAAG,IAAI,CAAA;QACtB,CAAC,CAAA;QACD,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAWD,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAA;QAKhC,MAAM,OAAO,GAAG,gBAAa,EAAE,CAAA;QAE/B,MAAM,SAAU,SAAQ,KAAK,CAAC,SAA4B;YACxD,iBAAiB;gBACf,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;YACtC,CAAC;YACD,MAAM;gBACJ,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;gBAE/B,OAAO,gCAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAM,CAAA;YACtC,CAAC;SACF;QACD,MAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;QAC7C,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,GAAG;YAClB,oBAAC,kBAAkB,OAAG,CACb,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;IAChC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,iEAAiE,EAAE,GAAG,EAAE;QAC3E,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QACpB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;SACF,CAAA;QAED,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAA;QAEhC,MAAM,OAAO,GAAG,gBAAa,EAAE,CAAA;QAE/B,MAAM,SAAU,SAAQ,KAAK,CAAC,SAAkC;YAC9D,MAAM;gBACJ,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA;gBAE/B,OAAO,gCAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAM,CAAA;YAC1D,CAAC;SACF;QACD,MAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;QAC7C,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,GAAG;YAClB,oBAAC,kBAAkB,OAAG,CACb,CACZ;aACA,MAAM,EAAE,CAAA;QACX,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,oBAAC,SAAS,IAAC,QAAQ,EAAE,IAAW,GAAI,CAAC,CAAC,MAAM,EAAE,CAAA;QAE5E,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;QAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,CAAA;IACjC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC1C,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,EAAE,CAAC,CAAA;QAC5B,MAAM,OAAO,GAAG,gBAAa,EAAM,CAAA;QAEnC,MAAM,YAAa,SAAQ,KAAK,CAAC,SAAuB;YACtD,MAAM;gBACJ,OAAO,sCAAY,CAAA;YACrB,CAAC;SACF;QACD,SAAS,YAAY;YACnB,OAAO,gCAAO,CAAA;QAChB,CAAC;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;QAC1C,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;QAC1C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;QACrD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;IACvD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,IAAI,WAAW,GAAG,CAAC,CAAA;QAEnB,MAAM,MAAM,GAAW,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YACnC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAA;QACpB,CAAC,CAAA;QACD,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAWD,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAA;QAIhC,MAAM,OAAO,GAAG,gBAAa,EAAE,CAAA;QAE/B,MAAM,YAAa,SAAQ,KAAK,CAAC,SAAkC;YACjE,qBAAqB,CAAC,SAAS;gBAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAA;YACnD,CAAC;YACD,MAAM;gBACJ,WAAW,EAAE,CAAA;gBACb,OAAO,gCAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAM,CAAA;YACjD,CAAC;SACF;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;QAE1C,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,GAAG;YAClB,oBAAC,YAAY,OAAG,CACP,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAE3B,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;QAEpB,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAC7B,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACpC,IAAI,WAAW,GAAG,CAAC,CAAA;QAEnB,MAAM,MAAM,GAAW,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YACnC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAA;QACpB,CAAC,CAAA;QACD,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAWD,MAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAA;QAIhC,MAAM,WAAW,GAAG,aAAU,EAAc,CAAA;QAE5C,MAAM,YAAY,GAA4B,GAAG,EAAE;YACjD,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,EAAE,CAAA;YAC/B,WAAW,EAAE,CAAA;YAEb,OAAO,gCAAK,KAAK,CAAC,GAAG,CAAM,CAAA;QAC7B,CAAC,CAAA;QAED,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,GAAG;YAClB,oBAAC,YAAY,OAAG,CACP,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAE3B,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;YAChB,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;IAChC,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAI,WAAW,GAAG,CAAC,CAAA;QAEnB,MAAM,MAAM,GAAW,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YACnC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAA;QACpB,CAAC,CAAA;QACD,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAaD,MAAM,WAAW,GAAG,aAAU,EAAiB,CAAA;QAE/C,MAAM,YAAY,GAA4B,GAAG,EAAE;YACjD,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,EAAE,CAAA;YAC/B,WAAW,EAAE,CAAA;YAEb,OAAO,gCAAK,KAAK,CAAC,GAAG,CAAM,CAAA;QAC7B,CAAC,CAAA;QAED,MAAM,IAAI,GAAG,6BAAkB,CAAC,MAAM,CAAC,CAAA;QACvC,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,IAAI;YACnB,oBAAC,YAAY,OAAG,CACP,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;IAChC,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACvD,IAAI,WAAW,GAAG,CAAC,CAAA;QAEnB,MAAM,MAAM,GAAW,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YACnC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAA;QACpB,CAAC,CAAA;QACD,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP,MAAM;aACP;SACF,CAAA;QAeD,MAAM,OAAO,GAAG,gBAAa,EAAE,CAAA;QAE/B,MAAM,YAAY,GAAqC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;YACtE,WAAW,EAAE,CAAA;YAEb,OAAO,gCAAK,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAM,CAAA;QACtC,CAAC,CAAA;QAED,MAAM,qBAAqB,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;QAEnD,MAAM,IAAI,GAAG,6BAAkB,CAAC,MAAM,CAAC,CAAA;QACvC,MAAM,IAAI,GAAG,QAAQ;aAClB,MAAM,CACL,oBAAC,WAAQ,IAAC,KAAK,EAAE,IAAI;YACnB,oBAAC,qBAAqB,OAAG,CAChB,CACZ;aACA,MAAM,EAAE,CAAA;QAEX,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAA;IAChC,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAClD,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QAEpB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE;gBACL,GAAG,EAAE,KAAK;aACX;SACF,CAAA;QAQD,MAAM,MAAM,GAAG,aAAU,EAAW,CAAC;QAErC,MAAM,YAAY,GAAG,GAAG,EAAE;YACxB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,CAAC;YAE3B,OAAO,gCAAK,KAAK,CAAC,GAAG,CAAM,CAAA;QAC7B,CAAC,CAAA;QAED,MAAM,CAAC,GAAG,EAAE;YACV,QAAQ;iBACL,MAAM,CACL,oBAAC,YAAY,OAAG,CACjB;iBACA,MAAM,EAAE,CAAA;QACb,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACnB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { IAction, Overmind, createOvermindMock } from 'overmind'\nimport * as React from 'react'\nimport * as renderer from 'react-test-renderer'\n\nimport { IConnect, Provider, createConnect, createHook } from './'\n\ndescribe('React', () => {\n  test('should connect state and actions to stateless components', () => {\n    expect.assertions(2)\n    let didCallAction = false\n    const doThis: Action = () => {\n      didCallAction = true\n    }\n\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    const app = new Overmind(config)\n\n    interface Action<Input = void, Output = void | Promise<void>>\n      extends IAction<IConfig, Input, Output> {}\n\n    const connect = createConnect()\n\n    const Component: React.SFC<IConnect<IConfig>> = ({ overmind }) => {\n      overmind.actions.doThis()\n      return <h1>{overmind.state.foo}</h1>\n    }\n    const ConnectedComponent = connect(Component)\n    const tree = renderer\n      .create(\n        <Provider value={app}>\n          <ConnectedComponent />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(didCallAction).toBe(true)\n    expect(tree).toMatchSnapshot()\n  })\n\n  test('should connect actions and state to class components', () => {\n    expect.assertions(2)\n    let didCallAction = false\n    const doThis: Action = () => {\n      didCallAction = true\n    }\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    const app = new Overmind(config)\n\n    interface Action<Input = void, Output = void | Promise<void>>\n      extends IAction<IConfig, Input, Output> {}\n\n    const connect = createConnect()\n\n    class Component extends React.Component<IConnect<IConfig>> {\n      componentDidMount() {\n        this.props.overmind.actions.doThis()\n      }\n      render() {\n        const { overmind } = this.props\n\n        return <h1>{overmind.state.foo}</h1>\n      }\n    }\n    const ConnectedComponent = connect(Component)\n    const tree = renderer\n      .create(\n        <Provider value={app}>\n          <ConnectedComponent />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(didCallAction).toBe(true)\n    expect(tree).toMatchSnapshot()\n  })\n\n  test('should allow using component as normal, even when not connected', () => {\n    expect.assertions(2)\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n    }\n\n    const app = new Overmind(config)\n\n    const connect = createConnect()\n\n    class Component extends React.Component<IConnect<typeof config>> {\n      render() {\n        const { overmind } = this.props\n\n        return <h1>{overmind ? overmind.state.foo : 'nada'}</h1>\n      }\n    }\n    const ConnectedComponent = connect(Component)\n    const tree = renderer\n      .create(\n        <Provider value={app}>\n          <ConnectedComponent />\n        </Provider>\n      )\n      .toJSON()\n    const tree2 = renderer.create(<Component overmind={null as any} />).toJSON()\n\n    expect(tree).toMatchSnapshot()\n    expect(tree2).toMatchSnapshot()\n  })\n\n  test('should preserve component name', () => {\n    const app = new Overmind({})\n    const connect = createConnect<{}>()\n\n    class FooComponent extends React.Component<IConnect<{}>> {\n      render() {\n        return <h1>hop</h1>\n      }\n    }\n    function BarComponent() {\n      return <div />\n    }\n\n    const ConnectedFoo = connect(FooComponent)\n    const ConnectedBar = connect(BarComponent)\n    expect(ConnectedFoo.name).toBe('ConnectFooComponent')\n    expect(ConnectedBar.name).toBe('ConnectBarComponent')\n  })\n\n  test('should allow using shouldComponentUpdate', () => {\n    let renderCount = 0\n\n    const doThis: Action = ({ state }) => {\n      state.foo = 'bar2'\n    }\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    const app = new Overmind(config)\n\n    interface Action<Input = void> extends IAction<IConfig, Input> {}\n\n    const connect = createConnect()\n\n    class FooComponent extends React.Component<IConnect<typeof config>> {\n      shouldComponentUpdate(nextProps) {\n        return this.props.overmind !== nextProps.overmind\n      }\n      render() {\n        renderCount++\n        return <h1>{this.props.overmind.state.foo}</h1>\n      }\n    }\n\n    const ConnectedFoo = connect(FooComponent)\n\n    const tree = renderer\n      .create(\n        <Provider value={app}>\n          <ConnectedFoo />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(renderCount).toBe(1)\n\n    app.actions.doThis()\n\n    expect(renderCount).toBe(2)\n  })\n  test('should allow using hooks', () => {\n    let renderCount = 0\n\n    const doThis: Action = ({ state }) => {\n      state.foo = 'bar2'\n    }\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    const app = new Overmind(config)\n\n    interface Action<Input = void> extends IAction<IConfig, Input> {}\n\n    const useOvermind = createHook<typeof app>()\n\n    const FooComponent: React.FunctionComponent = () => {\n      const { state } = useOvermind()\n      renderCount++\n\n      return <h1>{state.foo}</h1>\n    }\n\n    const tree = renderer\n      .create(\n        <Provider value={app}>\n          <FooComponent />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(renderCount).toBe(1)\n\n    renderer.act(() => {\n      app.actions.doThis()\n    })\n\n    expect(renderCount).toBe(2)\n    expect(tree).toMatchSnapshot()\n  })\n  test('should allow using mocked Overmind', () => {\n    let renderCount = 0\n\n    const doThis: Action = ({ state }) => {\n      state.foo = 'bar2'\n    }\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    interface Action<Input = void> extends IAction<IConfig, Input> {}\n\n    const useOvermind = createHook<typeof config>()\n\n    const FooComponent: React.FunctionComponent = () => {\n      const { state } = useOvermind()\n      renderCount++\n\n      return <h1>{state.foo}</h1>\n    }\n\n    const mock = createOvermindMock(config)\n    const tree = renderer\n      .create(\n        <Provider value={mock}>\n          <FooComponent />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(renderCount).toBe(1)\n    expect(tree).toMatchSnapshot()\n  })\n  test('should be able to use Provider with connect', () => {\n    let renderCount = 0\n\n    const doThis: Action = ({ state }) => {\n      state.foo = 'bar2'\n    }\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        doThis,\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n      actions: {\n        doThis: typeof doThis\n      }\n    }\n\n    interface Action<Input = void> extends IAction<IConfig, Input> {}\n\n    interface Connect extends IConnect<IConfig> {}\n\n    const connect = createConnect()\n\n    const FooComponent: React.FunctionComponent<Connect> = ({ overmind }) => {\n      renderCount++\n\n      return <h1>{overmind.state.foo}</h1>\n    }\n\n    const ConnectedFooComponent = connect(FooComponent)\n\n    const mock = createOvermindMock(config)\n    const tree = renderer\n      .create(\n        <Provider value={mock}>\n          <ConnectedFooComponent />\n        </Provider>\n      )\n      .toJSON()\n\n    expect(renderCount).toBe(1)\n    expect(tree).toMatchSnapshot()\n  })\n  test('should throw an error without provider', () => {\n    expect.assertions(1)\n\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n    }\n\n    type IConfig = {\n      state: {\n        foo: typeof config.state.foo\n      }\n    }\n\n    const useApp = createHook<IConfig>();\n\n    const FooComponent = () => {\n      const { state } = useApp();\n\n      return <h1>{state.foo}</h1>\n    }\n\n    expect(() => {\n      renderer\n        .create(\n          <FooComponent />\n        )\n        .toJSON()\n    }).toThrow(Error)\n  })\n})\n"]}