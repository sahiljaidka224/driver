import { IProxifier, IProxyStateTree, ITrackCallback, ITrackScopedCallback, ITrackStateTree } from './types';
export declare class TrackStateTree<T extends object> implements ITrackStateTree<T> {
    private disposeOnReset;
    master: IProxyStateTree<T>;
    pathDependencies: Set<string>;
    callback: ITrackCallback;
    shouldTrack: boolean;
    state: T;
    proxifier: IProxifier<T>;
    trackPathListeners: Array<(path: string) => void>;
    constructor(master: IProxyStateTree<T>);
    trackPaths(): () => Set<string>;
    canMutate(): boolean;
    canTrack(): boolean;
    addTrackingPath(path: string): void;
    track(cb?: ITrackCallback): this;
    clearTracking(): void;
    stopTracking(): void;
    trackScope(scope: ITrackScopedCallback<T>, cb?: ITrackCallback): any;
    dispose(): this;
}
