import { IMutation, IMutationCallback, IMutationTree, IProxifier, IProxyStateTree } from './types';
export declare class MutationTree<T extends object> implements IMutationTree<T> {
    private mutationCallbacks;
    master: IProxyStateTree<T>;
    state: T;
    proxifier: IProxifier<T>;
    mutations: IMutation[];
    objectChanges: Set<string>;
    isTracking: boolean;
    isBlocking: boolean;
    trackPathListeners: Array<(path: string) => void>;
    constructor(master: IProxyStateTree<T>, proxifier?: IProxifier<T>);
    trackPaths(): () => Set<string>;
    getMutations(): IMutation[];
    getObjectChanges(): Set<string>;
    addMutation(mutation: IMutation, objectChangePath?: string): void;
    flush(isAsync?: boolean): any;
    onMutation(callback: IMutationCallback): void;
    canMutate(): boolean;
    canTrack(): boolean;
    blockMutations(): void;
    enableMutations(): void;
    dispose(): this;
}
