{"version":3,"file":"TrackStateTree.js","sourceRoot":"","sources":["../src/TrackStateTree.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IProxifier,\n  IProxyStateTree,\n  ITrackCallback,\n  ITrackScopedCallback,\n  ITrackStateTree,\n} from './types'\n\nexport class TrackStateTree<T extends object> implements ITrackStateTree<T> {\n  private disposeOnReset: Function\n  master: IProxyStateTree<T>\n  pathDependencies: Set<string> = new Set()\n  callback: ITrackCallback\n  shouldTrack: boolean = false\n  state: T\n  proxifier: IProxifier<T>\n  trackPathListeners: Array<(path: string) => void> = []\n  constructor(master: IProxyStateTree<T>) {\n    this.master = master\n    this.proxifier = master.proxifier\n    this.state = master.state\n  }\n  trackPaths() {\n    const paths = new Set<string>()\n    const listener = (path) => {\n      paths.add(path)\n    }\n    this.trackPathListeners.push(listener)\n\n    return () => {\n      this.trackPathListeners.splice(\n        this.trackPathListeners.indexOf(listener),\n        1\n      )\n\n      return paths\n    }\n  }\n  canMutate() {\n    return false\n  }\n  canTrack() {\n    return true\n  }\n  addTrackingPath(path: string) {\n    if (!this.shouldTrack) {\n      return\n    }\n\n    this.pathDependencies.add(path)\n\n    if (this.callback) {\n      this.master.addPathDependency(path, this.callback)\n    }\n  }\n  track(cb?: ITrackCallback) {\n    this.master.changeTrackStateTree(this)\n    this.shouldTrack = true\n\n    this.clearTracking()\n\n    if (cb) {\n      this.callback = (...args) => {\n        if (!this.callback) {\n          return\n        }\n        cb(...args)\n      }\n    }\n\n    return this\n  }\n  clearTracking() {\n    if (this.callback) {\n      for (let path of this.pathDependencies) {\n        this.master.removePathDependency(path, this.callback)\n      }\n    }\n\n    this.pathDependencies.clear()\n  }\n  stopTracking() {\n    this.shouldTrack = false\n  }\n  trackScope(scope: ITrackScopedCallback<T>, cb?: ITrackCallback) {\n    const previousPreviousTree = this.master.previousTree\n    const previousCurrentTree = this.master.currentTree\n    this.master.currentTree = this\n    this.track(cb)\n    const result = scope(this)\n    this.master.currentTree = previousCurrentTree\n    this.master.previousTree = previousPreviousTree\n    this.stopTracking()\n    return result\n  }\n  dispose() {\n    if (!this.callback) {\n      this.pathDependencies.clear()\n\n      return this\n    }\n\n    this.clearTracking()\n    this.callback = null\n    this.proxifier = this.master.proxifier\n\n    if (this.master.currentTree === this) {\n      this.master.currentTree = null\n    }\n\n    return this\n  }\n}\n"]}