{"version":3,"file":"MutationTree.js","sourceRoot":"","sources":["../src/MutationTree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AASvC,MAAM,OAAO,YAAY;IAUvB,YAAY,MAA0B,EAAE,SAAyB;QATzD,sBAAiB,GAAwB,EAAE,CAAA;QAInD,cAAS,GAAgB,EAAE,CAAA;QAC3B,kBAAa,GAAG,IAAI,GAAG,EAAU,CAAA;QACjC,eAAU,GAAY,KAAK,CAAA;QAC3B,eAAU,GAAY,KAAK,CAAA;QAC3B,uBAAkB,GAAkC,EAAE,CAAA;QAEpD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,CAAA;QACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAA;IAC7D,CAAC;IACD,UAAU;QACR,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAA;QAC/B,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,EAAE;YACxB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjB,CAAC,CAAA;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAEtC,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAC5B,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,EACzC,CAAC,CACF,CAAA;YAED,OAAO,KAAK,CAAA;QACd,CAAC,CAAA;IACH,CAAC;IACD,YAAY;QACV,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QAExC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAA;QAEzB,OAAO,SAAS,CAAA;IAClB,CAAC;IACD,gBAAgB;QACd,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAA;QAEtD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAA;QAE1B,OAAO,aAAa,CAAA;IACtB,CAAC;IACD,WAAW,CAAC,QAAmB,EAAE,gBAAyB;QACxD,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAA;QAEjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAE7B,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;SACzC;QAED,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;YAC5C,EAAE,CACA,QAAQ,EACR,IAAI,GAAG,CACL,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CACvE,EACD,cAAc,CACf,CAAA;SACF;QAED,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC3C,QAAQ,CACN,QAAQ,EACR,IAAI,GAAG,CACL,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CACvE,EACD,cAAc,CACf,CAAA;SACF;IACH,CAAC;IACD,KAAK,CAAC,UAAmB,KAAK;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IACzC,CAAC;IACD,UAAU,CAAC,QAA2B;QACpC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACvC,CAAC;IACD,SAAS;QACP,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAA;IAC5C,CAAC;IACD,QAAQ;QACN,OAAO,KAAK,CAAA;IACd,CAAC;IACD,cAAc;QACZ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;IACxB,CAAC;IACD,eAAe;QACb,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;IACzB,CAAC;IACD,OAAO;QACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QACvB,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAA;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA;QAEtC,OAAO,IAAI,CAAA;IACb,CAAC;CACF","sourcesContent":["import { Proxifier } from './Proxyfier'\nimport {\n  IMutation,\n  IMutationCallback,\n  IMutationTree,\n  IProxifier,\n  IProxyStateTree,\n} from './types'\n\nexport class MutationTree<T extends object> implements IMutationTree<T> {\n  private mutationCallbacks: IMutationCallback[] = []\n  master: IProxyStateTree<T>\n  state: T\n  proxifier: IProxifier<T>\n  mutations: IMutation[] = []\n  objectChanges = new Set<string>()\n  isTracking: boolean = false\n  isBlocking: boolean = false\n  trackPathListeners: Array<(path: string) => void> = []\n  constructor(master: IProxyStateTree<T>, proxifier?: IProxifier<T>) {\n    this.isTracking = true\n    this.master = master\n    this.proxifier = proxifier || new Proxifier(this)\n    this.state = this.proxifier.proxify(master.sourceState, '')\n  }\n  trackPaths() {\n    const paths = new Set<string>()\n    const listener = (path) => {\n      paths.add(path)\n    }\n    this.trackPathListeners.push(listener)\n\n    return () => {\n      this.trackPathListeners.splice(\n        this.trackPathListeners.indexOf(listener),\n        1\n      )\n\n      return paths\n    }\n  }\n  getMutations() {\n    const mutations = this.mutations.slice()\n\n    this.mutations.length = 0\n\n    return mutations\n  }\n  getObjectChanges() {\n    const objectChanges = new Set([...this.objectChanges])\n\n    this.objectChanges.clear()\n\n    return objectChanges\n  }\n  addMutation(mutation: IMutation, objectChangePath?: string) {\n    const currentFlushId = this.master.currentFlushId\n\n    this.mutations.push(mutation)\n\n    if (objectChangePath) {\n      this.objectChanges.add(objectChangePath)\n    }\n\n    for (let cb of this.master.mutationCallbacks) {\n      cb(\n        mutation,\n        new Set(\n          objectChangePath ? [mutation.path, objectChangePath] : [mutation.path]\n        ),\n        currentFlushId\n      )\n    }\n\n    for (let callback of this.mutationCallbacks) {\n      callback(\n        mutation,\n        new Set(\n          objectChangePath ? [mutation.path, objectChangePath] : [mutation.path]\n        ),\n        currentFlushId\n      )\n    }\n  }\n  flush(isAsync: boolean = false) {\n    return this.master.flush(this, isAsync)\n  }\n  onMutation(callback: IMutationCallback) {\n    this.mutationCallbacks.push(callback)\n  }\n  canMutate() {\n    return this.isTracking && !this.isBlocking\n  }\n  canTrack() {\n    return false\n  }\n  blockMutations() {\n    this.isBlocking = true\n  }\n  enableMutations() {\n    this.isBlocking = false\n  }\n  dispose() {\n    this.isTracking = false\n    this.mutationCallbacks.length = 0\n    this.proxifier = this.master.proxifier\n\n    return this\n  }\n}\n"]}