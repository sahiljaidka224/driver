{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import isPlainObject from 'is-plain-obj'\n\nimport { MutationTree } from './MutationTree'\nimport { IS_PROXY, PATH, PROXY_TREE, Proxifier, VALUE } from './Proxyfier'\nimport { TrackStateTree } from './TrackStateTree'\nimport {\n  IFlushCallback,\n  IMutation,\n  IMutationCallback,\n  IMutationTree,\n  IOptions,\n  IProxifier,\n  IProxyStateTree,\n  ITrackCallback,\n  ITrackStateTree,\n  TTree,\n} from './types'\n\nexport {\n  IS_PROXY,\n  PROXY_TREE,\n  VALUE,\n  PATH,\n  IMutation,\n  ITrackCallback,\n  ITrackStateTree,\n  IMutationTree,\n  TrackStateTree,\n  MutationTree,\n}\n\nexport * from './types'\n\nexport class ProxyStateTree<T extends object> implements IProxyStateTree<T> {\n  private cache = {\n    mutationTree: [] as IMutationTree<T>[],\n    trackStateTree: [] as ITrackStateTree<T>[],\n  }\n  flushCallbacks: IFlushCallback[] = []\n  mutationCallbacks: IMutationCallback[] = []\n  currentFlushId: number = 0\n  currentTree: TTree\n  previousTree: TTree\n  mutationTree: IMutationTree<T>\n  proxifier: IProxifier<T>\n  master: ProxyStateTree<T>\n  pathDependencies: {\n    [path: string]: Set<ITrackCallback>\n  } = {}\n  state: T\n  sourceState: T\n  options: IOptions\n  constructor(state: T, options: IOptions = {}) {\n    if (typeof options.devmode === 'undefined') {\n      options.devmode = true\n    }\n\n    if (!options.delimiter) {\n      options.delimiter = '.'\n    }\n\n    this.master = this\n    this.sourceState = state\n    this.options = options\n\n    this.createTrackStateProxifier()\n  }\n  /*\n    We create a base proxifier for tracking state. That means there is one\n    proxifier for all track state trees. This works because the actual tracking\n    refers to the current tree on \"master\"\n  */\n  private createTrackStateProxifier() {\n    const trackStateTree = new TrackStateTree(this)\n\n    this.proxifier = trackStateTree.proxifier = new Proxifier(trackStateTree)\n    this.state = trackStateTree.state = this.proxifier.proxify(\n      this.sourceState,\n      ''\n    )\n  }\n  getMutationTree(): IMutationTree<T> {\n    if (!this.options.devmode) {\n      return (this.mutationTree =\n        this.mutationTree || new MutationTree(this, this.proxifier))\n    }\n\n    const tree = this.cache.mutationTree.pop() || new MutationTree(this)\n\n    return tree\n  }\n  getTrackStateTree(): ITrackStateTree<T> {\n    return this.cache.trackStateTree.pop() || new TrackStateTree(this)\n  }\n  getTrackStateTreeWithProxifier(): ITrackStateTree<T> {\n    const tree = this.getTrackStateTree()\n\n    tree.proxifier = new Proxifier(tree)\n    tree.state = tree.proxifier.proxify(this.sourceState, '')\n\n    return tree\n  }\n  changeTrackStateTree(tree: ITrackStateTree<T>) {\n    this.previousTree = this.currentTree\n    this.currentTree = tree\n  }\n  disposeTree(tree: TTree) {\n    if (tree instanceof MutationTree) {\n      this.cache.mutationTree.push(tree.dispose())\n    } else if (tree instanceof TrackStateTree) {\n      this.cache.trackStateTree.push(tree.dispose())\n    }\n  }\n  onMutation(callback: IMutationCallback) {\n    this.mutationCallbacks.push(callback)\n\n    return () => {\n      this.mutationCallbacks.splice(this.mutationCallbacks.indexOf(callback), 1)\n    }\n  }\n  forceFlush() {\n    const emptyMutations = []\n    const emptyPaths = []\n    for (let key in this.pathDependencies) {\n      const callbacks = this.pathDependencies[key]\n      callbacks.forEach((callback) => {\n        callback(emptyMutations, emptyPaths, this.currentFlushId++, false)\n      })\n    }\n  }\n  flush(trees, isAsync: boolean = false) {\n    let changes\n    if (Array.isArray(trees)) {\n      changes = trees.reduce(\n        (aggr, tree) => ({\n          mutations: aggr.mutations.concat(tree.getMutations()),\n          objectChanges: new Set([\n            ...aggr.objectChanges,\n            ...tree.getObjectChanges(),\n          ]),\n        }),\n        {\n          mutations: [],\n          objectChanges: new Set(),\n        }\n      )\n    } else {\n      changes = {\n        mutations: (trees as IMutationTree<any>).getMutations(),\n        objectChanges: (trees as IMutationTree<any>).getObjectChanges(),\n      }\n    }\n\n    if (!changes.mutations.length && !changes.objectChanges.size) {\n      return {\n        mutations: [],\n        flushId: null,\n      }\n    }\n\n    const paths: Set<string> = new Set()\n    const pathCallbacksToCall: Set<ITrackCallback> = new Set()\n\n    const flushId = this.currentFlushId++\n\n    for (let objectChange of changes.objectChanges) {\n      if (this.pathDependencies[objectChange]) {\n        paths.add(objectChange)\n      }\n    }\n\n    for (let mutation of changes.mutations) {\n      if (mutation.hasChangedValue) {\n        paths.add(mutation.path)\n      }\n    }\n\n    // Sort so that parent paths are called first\n    const sortedPaths = Array.from(paths).sort()\n\n    for (let path of sortedPaths) {\n      if (this.pathDependencies[path]) {\n        for (let callback of this.pathDependencies[path]) {\n          pathCallbacksToCall.add(callback)\n        }\n      }\n    }\n\n    for (let callback of pathCallbacksToCall) {\n      callback(changes.mutations, sortedPaths, flushId, isAsync)\n    }\n\n    // We have to ensure that we iterate all callbacks. One flush might\n    // lead to a change of the array (disposing), which means something\n    // might be skipped. But we still want to allow removal of callbacks,\n    // we just do not want to skip any, which is why we still check if it\n    // exists in the original array\n    const flushCallbacks = this.flushCallbacks.slice()\n    for (let callback of flushCallbacks) {\n      if (this.flushCallbacks.includes(callback)) {\n        callback(changes.mutations, sortedPaths, flushId, isAsync)\n      }\n    }\n\n    paths.clear()\n    pathCallbacksToCall.clear()\n\n    return {\n      mutations: changes.mutations,\n      flushId,\n    }\n  }\n  onFlush(callback: IFlushCallback) {\n    this.flushCallbacks.push(callback)\n\n    return () =>\n      this.flushCallbacks.splice(this.flushCallbacks.indexOf(callback), 1)\n  }\n  rescope(value: any, tree: TTree) {\n    return value && value[IS_PROXY]\n      ? tree.proxifier.proxify(value[VALUE], value[PATH])\n      : value\n  }\n  addPathDependency(path: string, callback: ITrackCallback) {\n    if (!this.pathDependencies[path]) {\n      this.pathDependencies[path] = new Set()\n    }\n\n    this.pathDependencies[path].add(callback)\n  }\n  removePathDependency(path: string, callback: ITrackCallback) {\n    this.pathDependencies[path].delete(callback)\n\n    if (!this.pathDependencies[path].size) {\n      delete this.pathDependencies[path]\n    }\n  }\n  toJSON() {\n    return this.sourceState\n  }\n}\n"]}