{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAKA;IAAA;QACU,WAAM,GAAG,IAAI,GAAG,EAAuB,CAAA;IAkDjD,CAAC;IAhDC,2BAAI,GAAJ,UAAwB,KAAQ,EAAE,GAAS;QACzC,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QAE9C,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;YAE7B,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;YAEhB,IAAI,QAAQ,CAAC,IAAI,EAAE;gBACjB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aACvB;SACF;IACH,CAAC;IAED,gCAAS,GAAT,UAA6B,KAAQ,EAAE,GAAS;QAC9C,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QAE9C,UAAU,CAAC;YACT,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC9C,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;gBAE7B,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;gBAEhB,IAAI,QAAQ,CAAC,IAAI,EAAE;oBACjB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;iBACvB;aACF;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,yBAAE,GAAF,UAAsB,KAAQ,EAAE,EAAuB;QACrD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;IACpC,CAAC;IAED,2BAAI,GAAJ,UAAwB,KAAQ,EAAE,EAAuB;QACvD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,CAAA;IACnC,CAAC;IAEO,kCAAW,GAAnB,UAAoB,KAAc,EAAE,EAAgB,EAAE,IAAa;QACjE,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;QAE9C,SAAS,CAAC,IAAI,CAAC;YACb,IAAI,MAAA;YACJ,EAAE,IAAA;SACH,CAAC,CAAA;QAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;IACnC,CAAC;IACH,mBAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,oCAAY","sourcesContent":["export type Listener = {\n  once: boolean\n  cb: ({}) => void\n}\n\nexport class EventEmitter<T> {\n  private events = new Map<keyof T, Listener[]>()\n\n  emit<K extends keyof T>(event: K, msg: T[K]) {\n    const listeners = this.events.get(event) || []\n\n    for (let i = listeners.length - 1; i >= 0; i--) {\n      const listener = listeners[i]\n\n      listener.cb(msg)\n\n      if (listener.once) {\n        listeners.splice(i, 1)\n      }\n    }\n  }\n\n  emitAsync<K extends keyof T>(event: K, msg: T[K]) {\n    const listeners = this.events.get(event) || []\n\n    setTimeout(() => {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i]\n\n        listener.cb(msg)\n\n        if (listener.once) {\n          listeners.splice(i, 1)\n        }\n      }\n    })\n  }\n\n  on<K extends keyof T>(event: K, cb: (msg: T[K]) => void) {\n    this.addListener(event, cb, false)\n  }\n\n  once<K extends keyof T>(event: K, cb: (msg: T[K]) => void) {\n    this.addListener(event, cb, true)\n  }\n\n  private addListener(event: keyof T, cb: ({}) => void, once: boolean) {\n    const listeners = this.events.get(event) || []\n\n    listeners.push({\n      once,\n      cb,\n    })\n\n    this.events.set(event, listeners)\n  }\n}\n"]}