"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const proxy_state_tree_1 = require("proxy-state-tree");
const INITIAL_STATE = Symbol('INITIAL_STATE');
const TRANSITIONS = Symbol('TRANSITIONS');
class StateMachine {
    constructor(transitions, definition) {
        this[INITIAL_STATE] = definition.state;
        this[TRANSITIONS] = transitions;
        Object.assign(this, definition);
    }
    transition(state) {
        const transitions = this[proxy_state_tree_1.VALUE][TRANSITIONS];
        if (transitions[this.state].includes(state)) {
            const tree = (this[proxy_state_tree_1.PROXY_TREE].master.mutationTree || this[proxy_state_tree_1.PROXY_TREE]);
            tree.enableMutations();
            this.state = state;
            Promise.resolve().then(() => tree.blockMutations());
            return true;
        }
        else if (process.env.NODE_ENV === 'development') {
            console.warn(`Overmind Statemachine - You tried to transition into "${state}", but it is not a valid transition. The valid transitions are ${JSON.stringify(transitions[this.state])}`);
        }
        return false;
    }
    matches(state) {
        if (state === this.state) {
            const tree = (this[proxy_state_tree_1.PROXY_TREE].master.mutationTree || this[proxy_state_tree_1.PROXY_TREE]);
            tree.enableMutations();
            return true;
        }
        return false;
    }
}
function statemachine(definition, state) {
    return new StateMachine(definition, state);
}
exports.statemachine = statemachine;
//# sourceMappingURL=statemachine.js.map