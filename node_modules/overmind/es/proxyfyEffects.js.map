{"version":3,"file":"proxyfyEffects.js","sourceRoot":"","sources":["../src/proxyfyEffects.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;AAE9C,SAAS,QAAQ,CAAC,KAAK;IACrB,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,CAAA;AAC7E,CAAC;AAED,IAAI,oBAAoB,GAAG,KAAK,CAAA;AAChC,IAAI,eAAe,GAAG,CAAC,CAAA;AACvB,MAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;AAC7C,MAAM,UAAU,cAAc,CAC5B,OAAgB,EAChB,EAAoB,EACpB,OAAe,EAAE;IAEjB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,EAAE;QAC1D,OAAO,OAAO,CAAA;KACf;IAED,OAAO,IAAI,KAAK,CAAC,OAAc,EAAE;QAC/B,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY;YACjC,MAAM,QAAQ,GAAG,eAAe,EAAE,CAAA;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACzB,OAAO,EAAE,CAAC;gBACR,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC/D,QAAQ;gBACR,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACpB,MAAM;gBACN,IAAI,EAAE,YAAY;aACnB,CAAC,CAAA;QACJ,CAAC;QACD,SAAS,CAAC,MAAM,EAAE,IAAI;YACpB,IAAI,CAAC,oBAAoB,EAAE;gBACzB,OAAO,CAAC,IAAI,CACV,yHAAyH,IAAI,yDAAyD,CACvL,CAAA;gBACD,oBAAoB,GAAG,IAAI,CAAA;aAC5B;YAED,OAAO,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAA;QAC5B,CAAC;QACD,GAAG,CAAC,MAAM,EAAE,IAAI;YACd,IAAI,IAAI,KAAK,aAAa,EAAE;gBAC1B,OAAO,MAAM,CAAA;aACd;YAED,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;QAChG,CAAC;KACF,CAAC,CAAA;AACJ,CAAC","sourcesContent":["export const doNotProxy = Symbol('doNotProxy')\n\nfunction isObject(value) {\n  return typeof value === 'object' && !Array.isArray(value) && value !== null\n}\n\nlet hasWarnedConstructor = false\nlet currentEffectId = 0\nconst ORIGIN_TARGET = Symbol('ORIGIN_TARGET')\nexport function proxifyEffects<Effects>(\n  effects: Effects,\n  cb: (effect) => void,\n  path: string = ''\n): Effects {\n  if (!isObject(effects) && !(typeof effects === 'function')) {\n    return effects\n  }\n  \n  return new Proxy(effects as any, {\n    apply(target, thisArg, agumentsList) {\n      const effectId = currentEffectId++\n      const name = path.split('.')\n      const method = name.pop()\n      return cb({\n        func: target.bind(thisArg ? thisArg[ORIGIN_TARGET] : undefined),\n        effectId,\n        name: name.join('.'),\n        method,\n        args: agumentsList,\n      })\n    },\n    construct(Target, args) {\n      if (!hasWarnedConstructor) {\n        console.warn(\n          `EFFECTS - It is highly recommended to create a custom effect, exposing a method that deals with the instantiation of \"${path}\". It improves readability and debugability of your app`\n        )\n        hasWarnedConstructor = true\n      }\n\n      return new Target(...args)\n    },\n    get(target, prop) {\n      if (prop === ORIGIN_TARGET) {\n        return target\n      }\n      \n      return proxifyEffects(target[prop], cb, path ? path + '.' + prop.toString() : prop.toString())\n    }\n  })\n}\n"]}