function parseNamespacedConfig(result, name, config) {
    const { actions, effects, onInitialize, state } = config;
    if (actions) {
        result.actions[name] = actions;
    }
    if (effects) {
        result.effects[name] = effects;
    }
    if (state) {
        result.state[name] = state;
    }
    if (onInitialize) {
        result.initializers[name] = onInitialize;
    }
}
export function namespaced(namespaces) {
    const result = {
        initializers: {},
        actions: {},
        effects: {},
        state: {},
    };
    Object.keys(namespaces).forEach((name) => {
        parseNamespacedConfig(result, name, namespaces[name]);
    });
    return Object.assign({
        actions: result.actions,
        effects: result.effects,
        state: result.state,
        onInitialize: (context, app) => Promise.all(Object.keys(result.initializers).map((key) => result.initializers[key](Object.assign(Object.assign({}, context), { execution: Object.assign(Object.assign({}, context.execution), { namespacePath: context.execution.namespacePath.concat(key) }) }), app))),
    });
}
//# sourceMappingURL=namespaced.js.map