import { SubType } from '../internalTypes';
import { IAction } from '..';
interface LazyConfiguration {
    [namespace: string]: () => Promise<{
        onInitialize?: any;
        state?: {};
        effects?: {};
        actions?: {};
        reactions?: {};
    }>;
}
export declare function lazy<T extends LazyConfiguration, B = T>(configurations: T): {
    onInitialize?: any;
    state: SubType<{
        [P in keyof T]?: ReturnType<T[P]> extends Promise<infer U> ? U extends {
            state: any;
        } ? U['state'] : never : never;
    }, object>;
    effects: SubType<{
        [P in keyof T]?: ReturnType<T[P]> extends Promise<infer U> ? U extends {
            effects: any;
        } ? U['effects'] : never : never;
    }, object> & {
        lazy: {
            loadConfig: (config: keyof T) => Promise<void>;
        };
    };
    actions: SubType<{
        [P in keyof T]?: ReturnType<T[P]> extends Promise<infer U> ? U extends {
            actions: any;
        } ? U['actions'] : never : never;
    }, object> & {
        lazy: {
            loadConfig: IAction<any, keyof T>;
        };
    };
};
export {};
