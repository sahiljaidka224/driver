{"version":3,"file":"merge.js","sourceRoot":"","sources":["../../src/config/merge.ts"],"names":[],"mappings":"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","sourcesContent":["import isPlainObject from 'is-plain-obj'\n\nimport { IConfiguration } from '../'\n\nfunction copy(target, source) {\n  return Object.keys(source).reduce((aggr, key) => {\n    if (key === '__esModule') {\n      return aggr\n    }\n\n    if (isPlainObject(source[key])) {\n      aggr[key] = copy(target[key] || {}, source[key])\n    } else if (Array.isArray(source[key])) {\n      aggr[key] = source[key]\n    } else {\n      const originalDescriptor = Object.getOwnPropertyDescriptor(source, key)\n      const isAGetter = originalDescriptor && 'get' in originalDescriptor\n      const value = source[key]\n\n      if (isAGetter) {\n        Object.defineProperty(aggr, key, originalDescriptor as any)\n      } else {\n        aggr[key] = value\n      }\n    }\n\n    return aggr\n  }, target)\n}\n\nexport function merge<A extends IConfiguration, B extends IConfiguration>(\n  configA: A,\n  configB: B\n): A & B\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration\n>(configA: A, configB: B, configC: C): A & B & C\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration\n>(configA: A, configB: B, configC: C, configD: D): A & B & C & D\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration,\n  E extends IConfiguration\n>(configA: A, configB: B, configC: C, configD: D, configE: E): A & B & C & D & E\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration,\n  E extends IConfiguration,\n  F extends IConfiguration\n>(\n  configA: A,\n  configB: B,\n  configC: C,\n  configD: D,\n  configE: E,\n  configF: F\n): A & B & C & D & E & F\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration,\n  E extends IConfiguration,\n  F extends IConfiguration,\n  G extends IConfiguration\n>(\n  configA: A,\n  configB: B,\n  configC: C,\n  configD: D,\n  configE: E,\n  configF: F,\n  configG: G\n): A & B & C & D & E & F & G\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration,\n  E extends IConfiguration,\n  F extends IConfiguration,\n  G extends IConfiguration,\n  H extends IConfiguration\n>(\n  configA: A,\n  configB: B,\n  configC: C,\n  configD: D,\n  configE: E,\n  configF: F,\n  configG: G,\n  configH: H\n): A & B & C & D & E & F & G & H\nexport function merge<\n  A extends IConfiguration,\n  B extends IConfiguration,\n  C extends IConfiguration,\n  D extends IConfiguration,\n  E extends IConfiguration,\n  F extends IConfiguration,\n  G extends IConfiguration,\n  H extends IConfiguration,\n  I extends IConfiguration\n>(\n  configA: A,\n  configB: B,\n  configC: C,\n  configD: D,\n  configE: E,\n  configF: F,\n  configG: G,\n  configH: H,\n  configI: I\n): A & B & C & D & E & F & G & H & I\n\n\n\nexport function merge(...configurations: IConfiguration[]): IConfiguration {\n  const initializers = configurations.reduce(\n    (aggr, config) =>\n      config.onInitialize ? aggr.concat(config.onInitialize) : aggr,\n    [] as any[]\n  )\n  const rootConfiguration = configurations.shift()\n  const reducedConfigurations = configurations.reduce(\n    (aggr, config) => {\n      const stateDuplicates = aggr.state\n        ? Object.keys(aggr.state).some((key) =>\n            config.state ? Object.keys(config.state).includes(key) : false\n          )\n        : false\n      const actionsDuplicates = aggr.actions\n        ? Object.keys(aggr.actions).some((key) =>\n            config.actions ? Object.keys(config.actions).includes(key) : false\n          )\n        : false\n      const effectsDuplicates = aggr.effects\n        ? Object.keys(aggr.effects).some((key) =>\n            config.effects ? Object.keys(config.effects).includes(key) : false\n          )\n        : false\n      if (stateDuplicates) {\n        throw new Error(\n          'Merge conflict: at least one state definition contains a duplicate key'\n        )\n      }\n      if (actionsDuplicates) {\n        throw new Error(\n          'Merge conflict: at least one actions definition contains a duplicate key'\n        )\n      }\n      if (effectsDuplicates) {\n        throw new Error(\n          'Merge conflict: at least one effects definition contains a duplicate key'\n        )\n      }\n      return {\n        onInitialize: aggr.onInitialize,\n        state: copy(aggr.state, config.state || {}),\n        effects: {\n          ...aggr.effects,\n          ...config.effects,\n        },\n        actions: {\n          ...aggr.actions,\n          ...config.actions,\n        },\n      }\n    },\n    {\n      ...rootConfiguration,\n      onInitialize: initializers.length\n        ? (context, value) =>\n            Promise.all(initializers.map((cb) => cb(context, value)))\n        : undefined,\n    }\n  )\n  return reducedConfigurations\n}\n"]}